/* Generated by AN DISI Unibo */ 
package it.unibo.watcherqak22

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Watcherqak22 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val DLIMIT = 30  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name STARTS")
					}
					 transition(edgeName="t00",targetState="handleSonarData",cond=whenEvent("sonardata"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var DistanceStr = payloadArg(0); var Distance = DistanceStr.toInt()  
								if(  Distance <= DLIMIT  
								 ){emit("thrill", "info($Distance)" ) 
								}
						}
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t01",targetState="handleSonarData",cond=whenEvent("sonardata"))
				}	 
			}
		}
}
