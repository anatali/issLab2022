/* Generated by AN DISI Unibo */ 
package it.unibo.boundaryqak30

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Boundaryqak30 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var NumStep     = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 NumStep     = 0;  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="s00",cond=whenRequest("ready"))
				}	 
				state("s00") { //this:State
					action { //it:State
						 NumStep     = 0;  
						updateResourceRep( "waitingOn( edge_$NumStep )"  
						)
						answer("ready", "readyok", "readyok(boundaryqak30)","cmdconsole"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_s00", 
				 	 			scope, context!!, "local_tout_boundaryqak30_s00", 5000.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t01",targetState="coverNextEdge",cond=whenTimeout("local_tout_boundaryqak30_s00"))   
					transition(edgeName="t02",targetState="coverNextEdge",cond=whenDispatch("init"))
					interrupthandle(edgeName="t03",targetState="handleStop",cond=whenDispatch("stop"),interruptedStateTransitions)
				}	 
				state("coverNextEdge") { //this:State
					action { //it:State
						delay(500) 
						updateResourceRep( "doingastep $NumStep"  
						)
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="coverNextEdge",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="otherEdge",cond=whenReply("stepfail"))
					interrupthandle(edgeName="t06",targetState="handleStop",cond=whenDispatch("stop"),interruptedStateTransitions)
				}	 
				state("otherEdge") { //this:State
					action { //it:State
						 NumStep = NumStep + 1  
						println("otherEdge")
						updateResourceRep( "covering( edge_$NumStep)"  
						)
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="coverNextEdge", cond=doswitchGuarded({ NumStep < 4  
					}) )
					transition( edgeName="goto",targetState="endOfWork", cond=doswitchGuarded({! ( NumStep < 4  
					) }) )
				}	 
				state("handleStop") { //this:State
					action { //it:State
						 MsgUtil.outmagenta("boundaryqak30 |  stopped")  
						updateResourceRep( "stopped"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="exitFromStop",cond=whenDispatch("resume"))
				}	 
				state("exitFromStop") { //this:State
					action { //it:State
						updateResourceRep( "resumed"  
						)
						 MsgUtil.outgreen("boundaryqak30 |  resume")  
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						updateResourceRep( "athomeagain"  
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
