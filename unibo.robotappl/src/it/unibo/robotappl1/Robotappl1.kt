/* Generated by AN DISI Unibo */ 
package it.unibo.robotappl1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotappl1 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val Inmapname   = "xxx" //"map2019"  
			   var PathTodo    =  ""  
			   var CurGoalX    = 3
			   var CurGoalY    = 3 
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						unibo.kotlin.planner22Util.createRoomMapFromTextfile( "$Inmapname.txt"  )
						unibo.kotlin.planner22Util.initAI(  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						unibo.kotlin.planner22Util.setGoal( CurGoalX, CurGoalY  )
						 PathTodo = unibo.kotlin.planner22Util.doPlan().toString()  //List<aima.core.agent.Action>  [w, w, l, w] 
									.replace(" ","")
									.replace(",","")
									.replace("[","")
									.replace("]","")
						println("Azioni pianificate: $PathTodo")
						if(  PathTodo.length == 0  
						 ){println("WARNING: nessuna azione pianificata. Il piano vuoto viene comunque eseguito")
						}
						request("dopath", "dopath($PathTodo)" ,"pathexec" )  
					}
					 transition(edgeName="t00",targetState="pathok",cond=whenReply("dopathdone"))
					transition(edgeName="t01",targetState="pathko",cond=whenReply("dopathfail"))
				}	 
				state("pathok") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						unibo.kotlin.planner22Util.updateMapWithPath( PathTodo  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						unibo.kotlin.planner22Util.saveRoomMap( "xxx"  )
					}
				}	 
				state("pathko") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("dopathfail(ARG)"), Term.createTerm("dopathfail(P)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val planStillTodo = payloadArg(0) 
												var p =""
												if( planStillTodo=="none"){ //l'ultimo w ha provocato il fail
													p = PathTodo.dropLast(1)
												}else{
													p = PathTodo.dropLast( planStillTodo.length+1 ) //un w ha provocato il fail
												}
												println("planStillTodo:$planStillTodo over $PathTodo done: $p")
								unibo.kotlin.planner22Util.updateMapWithPath( p  )
								unibo.kotlin.planner22Util.updateMapObstacleOnCurrentDirection(  )
						}
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						unibo.kotlin.planner22Util.saveRoomMap( "xxx"  )
					}
				}	 
				state("end") { //this:State
					action { //it:State
						println("BYE")
					}
				}	 
			}
		}
}
