/* Generated by AN DISI Unibo */ 
package it.unibo.mapqak22

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mapqak22 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		val MaxNumStep  = 6
		var NumStep     = 0
		var stepok      = 0
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						 NumStep     = 0;
						           unibo.kotlin.planner22Util.initAI()
					}
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("coverNextColumn") { //this:State
					action { //it:State
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t00",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="backHome",cond=whenReply("stepfail"))
				}	 
				state("coverColumn") { //this:State
					action { //it:State
						 stepok = stepok + 1
						   		   unibo.kotlin.planner22Util.updateMap(  "w", "" ) 		
						println("coverColumn stepok=$stepok NumStep=$NumStep")
						delay(700) 
						request("step", "step(340)" ,"basicrobot" )  
					}
					 transition(edgeName="t02",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="backHome",cond=whenReplyGuarded("stepfail",{ NumStep <  MaxNumStep  
					}))
				}	 
				state("backHome") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						  unibo.kotlin.planner22Util.updateMapObstacleOnCurrentDirection()
						println("backHome")
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "l", "" )   
						delay(700) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "l", "" )   
						delay(700) 
						 unibo.kotlin.planner22Util.showCurrentRobotState()  
						request("step", "step(340)" ,"basicrobot" )  
					}
					 transition(edgeName="t04",targetState="gotoHome",cond=whenReply("stepdone"))
				}	 
				state("gotoHome") { //this:State
					action { //it:State
						 unibo.kotlin.planner22Util.updateMap(  "w", "" ) 
						 		   stepok = stepok - 1 
						println("gotoHome stepok=$stepok")
						delay(700) 
						request("step", "step(340)" ,"basicrobot" )  
					}
					 transition(edgeName="t05",targetState="gotoHome",cond=whenReplyGuarded("stepdone",{ stepok > 0  
					}))
					transition(edgeName="t06",targetState="turnAndStep",cond=whenReplyGuarded("stepdone",{ stepok == 0  
					}))
					transition(edgeName="t07",targetState="turnAndStep",cond=whenReply("stepfail"))
				}	 
				state("turnAndStep") { //this:State
					action { //it:State
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "r", "" )   
						delay(700) 
						request("step", "step(340)" ,"basicrobot" )  
					}
					 transition(edgeName="t08",targetState="posForNextColumn",cond=whenReply("stepdone"))
					transition(edgeName="t09",targetState="endOfWork",cond=whenReply("stepfail"))
				}	 
				state("posForNextColumn") { //this:State
					action { //it:State
						 unibo.kotlin.planner22Util.updateMap(  "w", "" )  
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "r", "" )   
						println("posForNextColumn stepok=$stepok")
						 unibo.kotlin.planner22Util.showCurrentRobotState()  
						delay(1700) 
					}
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						  //unibo.kotlin.planner22Util.updateMapObstacleOnCurrentDirection() 
						   			unibo.kotlin.planner22Util.showMap()
						   			unibo.kotlin.planner22Util.saveRoomMap("map2019")
					}
				}	 
			}
		}
}
