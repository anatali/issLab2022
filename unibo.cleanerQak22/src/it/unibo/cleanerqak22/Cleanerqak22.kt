/* Generated by AN DISI Unibo */ 
package it.unibo.cleanerqak22

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Cleanerqak22 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		val MaxNumStep  = 6
		var NumStep     = 0
		var GoingDown = true
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						 NumStep     = 0;
						          GoingDown = true 
						          unibo.kotlin.planner22Util.initAI()
					}
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("coverNextColumn") { //this:State
					action { //it:State
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t00",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="fatal",cond=whenReply("stepfail"))
				}	 
				state("coverColumn") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(500) 
						 unibo.kotlin.planner22Util.updateMap(  "w", "" ) 
						   			unibo.kotlin.planner22Util.showMap()  			
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t02",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="turn",cond=whenReplyGuarded("stepfail",{ NumStep <  MaxNumStep  
					}))
					transition(edgeName="t04",targetState="lastColumn",cond=whenReplyGuarded("stepfail",{ NumStep == MaxNumStep  
					}))
				}	 
				state("turn") { //this:State
					action { //it:State
						println("turn while GoingDown=$GoingDown")
						if(  GoingDown  
						 ){forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "l", "" )   
						}
						else
						 {forward("cmd", "cmd(r)" ,"basicrobot" ) 
						   unibo.kotlin.planner22Util.updateMap(  "r", "" )   
						 }
						delay(300) 
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t05",targetState="doingTurn",cond=whenReply("stepdone"))
					transition(edgeName="t06",targetState="lastColumn",cond=whenReply("stepfail"))
				}	 
				state("doingTurn") { //this:State
					action { //it:State
						println("doingTurn while GoingDown=$GoingDown")
						if(  GoingDown  
						 ){forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  unibo.kotlin.planner22Util.updateMap(  "l", "" )   
						}
						else
						 {forward("cmd", "cmd(r)" ,"basicrobot" ) 
						   unibo.kotlin.planner22Util.updateMap(  "r", "" )   
						 }
						delay(300) 
						  GoingDown = ! GoingDown 
						   			NumStep  = NumStep + 1   			
						   			unibo.kotlin.planner22Util.updateMap(  "w", "" )  //step laterale
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t07",targetState="turnDone",cond=whenReply("stepdone"))
					transition(edgeName="t08",targetState="fatal",cond=whenReply("stepfail"))
				}	 
				state("turnDone") { //this:State
					action { //it:State
						 unibo.kotlin.planner22Util.updateMap(  "w", "" )  //step inversione
						     	   unibo.kotlin.planner22Util.showMap()   		
					}
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("lastColumn") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						  //unibo.kotlin.planner22Util.updateMap(  "l", "" ) 
									unibo.kotlin.planner22Util.showMap()		 
					}
				}	 
				state("fatal") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
