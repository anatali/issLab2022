/* Generated by AN DISI Unibo */ 
package it.unibo.qasink

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Qasink ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		     
		   lateinit var firstActorInPipe : ActorBasic 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						  firstActorInPipe = sysUtil.getActor("sonarsimulator")!!
									firstActorInPipe.
									subscribeLocalActor("datalogger").
									subscribeLocalActor("datacleaner").
									//subscribeLocalActor("qasink"). 	//(1) QUITE INTERESTING  ...
									subscribeLocalActor("distancefilter").
									subscribeLocalActor("qasink") 
						forward("start", "start(qasource)" ,"sonarsimulator" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleSonarData",cond=whenEvent("sonarRobot"))
					transition(edgeName="t01",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						  emitLocalStreamEvent( currentMsg )   
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
